from core import loader
import random
import string

@loader.tds
class PasswordGenMod(loader.Module):
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π"""
    
    strings = {"name": "PasswordGen"}

    async def genpasscmd(self, message):
        """[–¥–ª–∏–Ω–∞] [nospec] ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å"""
        args = message.text.split()[1:]

        # –î–ª–∏–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        length = 12
        use_specials = True

        if args:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∏—Å–ª–æ
                if args[0].isdigit():
                    length = int(args[0])
                    if length < 6 or length > 64:
                        return await message.edit("‚ùó –î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 6 –¥–æ 64 —Å–∏–º–≤–æ–ª–æ–≤.")
                    args = args[1:]
            except Exception:
                return await message.edit("‚ùå –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è.")

        if args and "nospec" in args[0].lower():
            use_specials = False

        charset = string.ascii_letters + string.digits
        if use_specials:
            charset += "!@#$%^&*()-_=+[]{}<>?"

        password = ''.join(random.choice(charset) for _ in range(length))
        await message.edit(f"<b>üîê –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å:</b>\n<code>{password}</code>", parse_mode="html")