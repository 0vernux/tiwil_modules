from core import loader
import platform
import sys
import os

@loader.tds
class EnvInfoMod(loader.Module):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–∫—Ä—É–∂–µ–Ω–∏–∏"""

    strings = {"name": "EnvInfo"}

    async def envcmd(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        try:
            python_version = sys.version.split()[0]
            system = platform.system()
            release = platform.release()
            modules_dir = "modules"
            core_dir = "core"

            modules_loaded = len(self.bot.module_manager.modules)
            modules_total = len([
                name for name in os.listdir(modules_dir)
                if name.endswith(".py") and not name.startswith("_")
            ])

            log_path = "logs/bot.log"
            log_exists = os.path.exists(log_path)

            await message.edit(
                f"<b>üß¨ –û–∫—Ä—É–∂–µ–Ω–∏–µ:</b>\n\n"
                f"üñ•Ô∏è –°–∏—Å—Ç–µ–º–∞: <code>{system} {release}</code>\n"
                f"üêç Python: <code>{python_version}</code>\n"
                f"üì¶ –ú–æ–¥—É–ª–µ–π: <code>{modules_loaded}</code> –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ <code>{modules_total}</code>\n"
                f"üìÅ –õ–æ–≥–∏: {'‚úÖ' if log_exists else '‚ùå'} (<code>{log_path}</code>)",
                parse_mode="html"
            )
        except Exception as e:
            await message.edit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è: <code>{e}</code>", parse_mode="html")