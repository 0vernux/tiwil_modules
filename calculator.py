from core import loader

@loader.tds
class CalculatorMod(loader.Module):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è"""

    strings = {"name": "Calculator"}

    async def calccmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .calc <–≤—ã—Ä–∞–∂–µ–Ω–∏–µ>"""
        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            return await message.edit("‚ùó –£–∫–∞–∂–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è.")

        expression = args[1]

        try:
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ eval —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å—Ä–µ–¥–æ–π
            result = eval(expression, {"__builtins__": None}, {})
            await message.edit(f"üßÆ <b>{expression}</b> = <code>{result}</code>", parse_mode="html")
        except Exception as e:
            await message.edit(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è:\n<code>{e}</code>", parse_mode="html")